//@version=5
indicator("PhiloStoneVol", overlay=false)

// Input parameters
maType = input.string(title="Select Kalman MA Type", options=["SMA", "EMA", "TMA"], defval="TMA")
maLength = input.int(title="MA Length", defval=66)
lengthKalman = input.int(12, "Length Kalman", minval=1)
stopLossPct = input.float(1, title="Stop Loss (%)", minval=0.01) / 100
lookbackPeriod = input.int(30, title="Divergence Lookback Period", minval=1)

// SMMA function
smma(src, length) =>
    var float result = na
    if na(result)
        result := ta.sma(src, length)
    else
        result := (result * (length - 1) + src) / length
    result

// SMMA calculations
smma33Low = smma(low, 33)
smma33High = smma(high, 33)
smma144Low = smma(low, 144)
smma144High = smma(high, 144)

// Kalman MA calculation
calculateMA(type, source, length) =>
    if type == "SMA"
        ta.sma(source, length)
    else if type == "EMA"
        ta.ema(source, length)
    else
        ta.sma(ta.sma(source, length), length) // TMA calculation


var float klmf = na

calcKalmanFilter(source, length) =>
    float value1 = na
    float value2 = na
    value1 := 0.2 * (source - source[1]) + 0.8 * nz(value1[1])
    value2 := 0.1 * (high - low) + 0.8 * nz(value2[1])
    float lambda = math.abs(value1 / value2)
    float alpha = (-math.pow(lambda, 2) + math.sqrt(math.pow(lambda, 4) + 16 * math.pow(lambda, 2))) / 8
    // Use the previous value of klmf for the calculation
    alpha * source + (1 - alpha) * nz(klmf)

// Update klmf using the function's output in the main script body
klmf := calcKalmanFilter(close, lengthKalman)
KalmanMA = calculateMA(maType, close, maLength)

//----------- Trading signals
buySignal = ta.crossover(klmf, KalmanMA)
sellSignal = ta.crossunder(klmf, KalmanMA)

// Strategy execution
// if buySignal
//     strategy.entry("Long", strategy.long)

// if sellSignal
//     strategy.entry("Short", strategy.short)

// Plotting
// plot(KalmanMA, "Kalman MA", color.rgb(79, 75, 136))
// plot(klmf, "KLMF", color.rgb(124, 95, 129))
// plot(smma33Low, "SMMA 33 Low", color.rgb(0, 140, 255))
// plot(smma33High, "SMMA 33 High", color.rgb(0, 140, 255))
// plot(smma144Low, "SMMA 144 Low", color.rgb(255, 81, 0))
// plot(smma144High, "SMMA 144 High", color.rgb(255, 81, 0))

// plotKalmanMA = plot(KalmanMA, "Kalman MA", color=color.rgb(79, 75, 136))
// plotKlmf = plot(klmf, "KLMF", color=color.rgb(124, 95, 129))

// fillColor = klmf > KalmanMA ? color.rgb(235, 228, 158, 30) : color.rgb(240, 172, 172, 30)
// fill(plot1=plotKalmanMA, plot2=plotKlmf, color=fillColor)

// Accumulation/Distribution
// Calculate A/D
ad = ta.cum(close==high and close==low or high==low ? 0 : ((2 * close - low - high) / (high - low)) * volume)
// Adjust AD values by the recent AD value minus the recent close price
adjustedAD = ad// - (ad[0] - (close-close*0.05))
// Plot the adjusted AD values
//plot(adjustedAD, color=color.black, title="Adjusted AD")
var float klmf_ad = na
var float klmf_ad_ma = na
var int ad_kalman_length = na
var int ad_kalman_ma_len = na
ad_kalman_length := 12
ad_kalman_ma_len := 60
klmf_ad := calcKalmanFilter(adjustedAD, ad_kalman_length)
klmf_ad_ma := calculateMA(maType, adjustedAD, ad_kalman_ma_len)

// Plotting AD and AD TMA (no kalman)
plotKalmanMA_ad = plot(klmf_ad_ma, "Kalman AD MA", color=color.rgb(79, 75, 136))
plotKlmf_ad = plot(ad, "KLMF AD", color=color.rgb(124, 95, 129))
fillColor_ad = ad > klmf_ad_ma ? color.rgb(235, 228, 158, 30) : color.rgb(240, 172, 172, 30)
fill(plot1=plotKalmanMA_ad, plot2=plotKlmf_ad, color=fillColor_ad)

// Function to find local maxima and minima
isMaxima(price) =>
    ta.highestbars(price, lookbackPeriod) == 0

isMinima(price) =>
    ta.lowestbars(price, lookbackPeriod) == 0

// Tracking previous maxima and minima points
var float prevPriceMaxima = na
var float prevADMaxima = na
var float prevPriceMinima = na
var float prevADMinima = na
var int prevMaximaBarIndex = na
var int prevMinimaBarIndex = na

// Detecting and plotting divergences
applyBgColorDivAdMax = false
if isMaxima(high)
    if not na(prevPriceMaxima)
        // Check for bearish divergence: Price maxima increasing, RSI maxima decreasing
        div_len = bar_index-prevMaximaBarIndex
        if high > prevPriceMaxima and ad < prevADMaxima and div_len > 5
            applyBgColorDivAdMax := true
        else
            applyBgColorDivAdMax := false
    prevPriceMaxima := high
    prevADMaxima := ad
    prevMaximaBarIndex := bar_index

bgcolor(applyBgColorDivAdMax ? color.new(color.purple, 40) : na, title="Bear Divergence Background")

applyBgColorDivAdMin = false
if isMinima(low)
    if not na(prevPriceMinima)
        // Check for bullish divergence: Price minima decreasing, RSI minima increasing
        div_len = bar_index-prevMinimaBarIndex
        if low <= prevPriceMinima and ad >= prevADMinima and div_len > 5
            applyBgColorDivAdMin := true
        else
            applyBgColorDivAdMin := false
    prevPriceMinima := low
    prevADMinima := ad
    prevMinimaBarIndex := bar_index

bgcolor(applyBgColorDivAdMin ? color.new(color.purple, 40) : na, title="Bull Divergence Background")


//Momentum
// Accumulation/Distribution
// Calculate A/D
// len = input.int(21, minval=1, title="Length")
// src = input(close, title="Source")
mom = ta.mom(hlc3, 21)

// Tracking previous maxima and minima points
var float prevPriceMaximaMom = na
var float prevMomMaxima = na
var float prevPriceMinimaMom = na
var float prevMomMinima = na
var int prevMaximaBarIndexMom = na
var int prevMinimaBarIndexMom = na

// // Detecting and plotting divergences
applyBgColorDivMomMin = false
if isMaxima(high)
    if not na(prevPriceMaximaMom)
        // Check for bearish divergence: Price maxima increasing, RSI maxima decreasing
        div_len = bar_index-prevMaximaBarIndexMom
        if high > prevPriceMaximaMom and mom < prevMomMaxima and ta.highest(ta.rsi(hlc3, 21), 15) > 70
            applyBgColorDivMomMin := true
        else
            applyBgColorDivMomMin := false
    prevPriceMaximaMom := high
    prevMomMaxima := mom
    prevMaximaBarIndexMom := bar_index

bgcolor(applyBgColorDivMomMin ? color.new(#ff9900, 40) : na, title="Bear Divergence Background")

applyBgColorDivMomMax = false
if isMinima(low)
    if not na(prevPriceMinimaMom)
        // Check for bullish divergence: Price minima decreasing, RSI minima increasing
        div_len = bar_index-prevMinimaBarIndexMom
        if low <= prevPriceMinimaMom and mom >= prevMomMinima and ta.lowest(ta.rsi(hlc3, 21), 15) < 30
            applyBgColorDivMomMax := true
        else
            applyBgColorDivMomMax := false
    prevPriceMinimaMom := low
    prevMomMinima := mom
    prevMinimaBarIndexMom := bar_index

bgcolor(applyBgColorDivMomMax ? color.new(#ff9900, 40) : na, title="Bull Divergence Background")